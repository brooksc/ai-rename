#!/usr/bin/env python3
import argparse
import logging
import os
import shutil
import sys
import openai  # Assuming you have the openai library installed
import progressbar

from ai_rename import read_config, write_config, clean_filename, generate_filename, perform_ocr, rename_pdf

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Initialize argument parser
parser = argparse.ArgumentParser(description='Process files in a directory using OCR and AI to generate filenames.')
parser.add_argument('directory', type=str, help='The directory containing files to process.')
parser.add_argument('-s', '--summarize', action='store_true', help='Enable summarization of the OCR text.')
parser.add_argument('-d', '--debug', action='store_true', help='Enable debug logging.')
parser.add_argument('--keep-original', type=bool, default=True, help='Preserve the original file after renaming. Default is True.')

args = parser.parse_args()

# Configure logging based on debug flag
if args.debug:
    logging.getLogger().setLevel(logging.DEBUG)

DIR = args.directory
KEEP_ORIGINAL = args.keep_original

# Check if the provided argument is a valid directory
if not os.path.isdir(DIR):
    logging.error(f"The directory '{DIR}' does not exist.")
    sys.exit(1)

# Read the configuration file
config = read_config()
LANGUAGE = config.get('LANGUAGE', 'eng')
ORIG_SUBDIR = config.get('ORIG_SUBDIR', "orig")

# If the configuration file does not exist, prompt the user to enter the settings
if not config:
    LANGUAGE = input(f"Enter the language for OCR (default: {LANGUAGE}): ") or LANGUAGE
    ORIG_SUBDIR = input(f"Enter the original subdirectory (default: {ORIG_SUBDIR}): ") or ORIG_SUBDIR
    write_config({'LANGUAGE': LANGUAGE, 'ORIG_SUBDIR': ORIG_SUBDIR})

# Create a 'done' directory within the provided directory to store processed files
DONE_DIR = os.path.join(DIR, 'done')
os.makedirs(DONE_DIR, exist_ok=True)
ORIG_DIR = os.path.join(DIR, ORIG_SUBDIR)
os.makedirs(ORIG_DIR, exist_ok=True)

# Lookup table for file extensions to their respective processing functions
extension_to_function = {
    '.pdf': rename_pdf
}

# Process each file in the directory
for file_name in os.listdir(DIR):
    file_path = os.path.join(DIR, file_name)
    file_extension = os.path.splitext(file_name)[1].lower()

    if os.path.isfile(file_path) and file_extension in extension_to_function:
        extension_to_function[file_extension](file_path, file_name, DONE_DIR, ORIG_DIR, KEEP_ORIGINAL, LANGUAGE)

# Lookup table for file extensions to their respective processing functions
extension_to_function = {
    '.pdf': rename_pdf
}

# Process each file in the directory
for file_name in os.listdir(DIR):
    file_path = os.path.join(DIR, file_name)
    file_extension = os.path.splitext(file_name)[1].lower()

    if os.path.isfile(file_path) and file_extension in extension_to_function:
        extension_to_function[file_extension](file_path, file_name)

if not args.debug:
    # Initialize progress bar
    total_files = sum(1 for file_name in os.listdir(DIR) if os.path.isfile(os.path.join(DIR, file_name)) and file_name.lower().endswith(('.pdf', '.jpg', '.png')))
    bar = progressbar.ProgressBar(maxval=total_files, widgets=[progressbar.Bar('=', '[', ']'), ' ', progressbar.Percentage()])
    bar.start()

file_count = 0

# Process each file in the directory
for file_name in os.listdir(DIR):
    file_path = os.path.join(DIR, file_name)

    if os.path.isfile(file_path) and file_path.lower().endswith(('.pdf', '.jpg', '.png')):
        print(f"{file_path}")

        print("Starting OCR recognition ...")
        ocr_text = perform_ocr(file_path)

        if ocr_text:
            print("OCR successful")
            print("Starting AI request ...")

            ai_generated_filename = generate_filename(ocr_text)
            if ai_generated_filename:
                cleaned_filename = clean_filename(ai_generated_filename)
                if cleaned_filename:
                    file_extension = os.path.splitext(file_name)[1]
                    new_filename = f"{cleaned_filename}{file_extension}"
                    new_filepath = os.path.join(DONE_DIR, new_filename)

                    if KEEP_ORIGINAL:
                        shutil.copy2(file_path, new_filepath)
                        shutil.move(file_path, os.path.join(ORIG_DIR, file_name))
                        print(f"'{file_path}' was successfully renamed to '{new_filepath}' and copied")
                    else:
                        shutil.move(file_path, new_filepath)
                        print(f"'{file_path}' was successfully renamed to '{new_filepath}' and moved")

                    # Generate summary
                    if args.summarize:
                        # Use LLM for summarization
                        response = openai.Completion.create(
                            engine="text-davinci-003",
                            prompt=f"Summarize the following text: {ocr_text}",
                            max_tokens=100
                        )
                        summary = response.choices[0].text.strip()
                        if summary:
                            summary_filename = f"{cleaned_filename}_summary.txt"
                            summary_filepath = os.path.join(DONE_DIR, summary_filename)
                            with open(summary_filepath, 'w') as f:
                                f.write(summary)
                            print(f"Summary saved to '{summary_filepath}'")
                        else:
                            print("Failed to generate summary.")
                else:
                    print("Resulting filename is not between 15 - 100 characters")
            else:
                print("No valid filename could be extracted from the AI response.")
        else:
            print(f"OCR processing of '{file_path}' failed or no text recognized.")

        if not args.debug:
            file_count += 1
            bar.update(file_count)

    if not args.debug:
        bar.finish()
